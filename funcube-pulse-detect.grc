options:
  parameters:
    author: Lucas Berrigan
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: FUNcube pulse detection
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: funcube_detect_pulses
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: FUNcube Pulse Finder
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: decimation_factor
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 64.0]
    rotation: 0
    state: enabled
- name: fft_size
  id: variable
  parameters:
    comment: ''
    value: '64'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 128.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable
  parameters:
    comment: ''
    value: 166.38e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 64.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 48e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 16.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: '"FUNcube Dongle V2.034"'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 584.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_arg_0_0
  id: blocks_complex_to_arg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2280, 736.0]
    rotation: 0
    state: disabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 496.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2648, 892.0]
    rotation: 0
    state: disabled
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '3'
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/3
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 448.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: 'import gr_detect_pulses


      blk = gr_detect_pulses.blk'
    affinity: ''
    alias: ''
    comment: ''
    debounce_samples: '10'
    filename: '"output.csv"'
    maxoutbuf: '0'
    min_snr_db: '6'
    minoutbuf: '0'
    output_type: ''
    port: ''
    pulse_len_ms: '2.5'
    samp_rate: samp_rate / decimation_factor
    verbose: ''
  states:
    _io_cache: '(''Pulse detection logger'', ''blk'', [(''output_type'', "''file''"),
      (''verbose'', ''True''), (''filename'', "''output.csv''"), (''port'', ''0''),
      (''samp_rate'', ''250000''), (''min_snr_db'', ''6''), (''debounce_samples'',
      ''10''), (''pulse_len_ms'', ''2.5'')], [(''0'', ''float'', 1), (''1'', ''complex'',
      1)], [], ''\n    Hysteresis + debounce comparator with sample-accurate timestamping.\n    -
      Streaming output: float32 0.0/1.0\n    - Prints per-pulse CSV to stdout\n    '',
      [''filename'', ''min_snr_db'', ''output_type'', ''port'', ''pulse_len_ms'',
      ''samp_rate'', ''verbose''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 540.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:] =\
      \ input_items[0] * self.example_param\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2944, 756.0]
    rotation: 0
    state: disabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(64)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2288, 844.0]
    rotation: 0
    state: disabled
- name: hilbert_fc_0
  id: hilbert_fc
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '129'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 596.0]
    rotation: 0
    state: enabled

connections:
- [audio_source_0, '0', hilbert_fc_0, '0']
- [blocks_complex_to_arg_0_0, '0', epy_block_1, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_moving_average_xx_0, '0', epy_block_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0_0, '0']
- [hilbert_fc_0, '0', blocks_complex_to_mag_squared_0, '0']
- [hilbert_fc_0, '0', epy_block_0, '1']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
